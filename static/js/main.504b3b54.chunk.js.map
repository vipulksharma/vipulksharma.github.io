{"version":3,"sources":["logo.svg","components/reactplayer.js","App.js","reportWebVitals.js","index.js"],"names":["Product","state","pip","url","login","getMobileOperatingSystem","userAgent","navigator","vendor","window","opera","test","MSStream","handleEnablePIP","setState","handleTogglePIP","handleDisablePIP","checkLogin","ReactPlayer","canEnablePIP","ticketEnablePIP","alert","location","href","addEventListener","event","data","this","className","playing","playsinline","onEnablePIP","onDisablePIP","stopOnUnmount","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAAe,I,4DCGMA,E,4MAEjBC,MAAQ,CACJC,KAAK,EACLC,IAAK,+DACLC,OAAO,G,EAGXC,yBAA2B,WACvB,IAAMC,EAAYC,UAAUD,WAAaC,UAAUC,QAAUC,OAAOC,MACpE,MAAO,mBAAmBC,KAAKL,KAAeG,OAAOG,SAAW,MAAQ,WAAWD,KAAKL,GAAa,UAAY,W,EAGrHO,gBAAkB,WACd,EAAKC,SAAS,CACVZ,KAAK,K,EAIba,gBAAkB,WACd,EAAKD,SAAS,CACVZ,KAAM,EAAKD,MAAMC,O,EAIzBc,iBAAmB,WACf,EAAKF,SAAS,CACVZ,KAAK,K,EAIbe,WAAa,WACJ,EAAKhB,MAAMG,MA4B+B,YAApC,EAAKC,4BACZ,EAAKU,mBA5BDG,IAAYC,aAAa,EAAKlB,MAAME,KACpC,EAAKW,SAAS,CACVZ,KAAK,IAG+B,YAApC,EAAKG,2BAEDI,OAAM,SACNA,OAAM,SAAaW,iBAAgB,GAEnCC,MAAM,oBAGV,EAAKN,kBAK2B,QAApC,EAAKV,4BAA4E,YAApC,EAAKA,6BAClDI,OAAOa,SAASC,KAAO,6BAE3Bd,OAAOe,iBAAiB,WAAW,SAACC,GAChCJ,MAAM,qBAAD,OAAsBI,EAAMC,OAGjC,EAAKV,wB,4CASnB,WAAU,IAAD,EACcW,KAAK1B,MAAjBE,EADF,EACEA,IAAKD,EADP,EACOA,IACd,OACE,sBAAK0B,UAAU,UAAf,UACE,cAAC,IAAD,CACIzB,IAAKA,EACLD,IAAKA,EACL2B,SAAO,EACPC,aAAa,EACbC,YAAaJ,KAAKd,gBAClBmB,aAAcL,KAAKX,iBACnBiB,eAAe,IACnB,wBAAQC,QAASP,KAAKV,WAAtB,SACIf,EAAM,cAAgB,sB,GAhFGiC,aCStBC,MARf,WACE,OACE,qBAAKR,UAAU,MAAf,SACI,cAAC,EAAD,OCKOS,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.504b3b54.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import ReactPlayer from 'react-player';\nimport React, { Component } from 'react';\n\nexport default class Product extends Component {\n\n    state = {\n        pip: false,\n        url: \"https://dawchihliou.github.io/react-use-pip/video-sample.mp4\",\n        login: false,\n    } \n\n    getMobileOperatingSystem = () => {\n        const userAgent = navigator.userAgent || navigator.vendor || window.opera;\n        return /iPad|iPhone|iPod/.test(userAgent) && !window.MSStream ? \"iOS\" : /android/i.test(userAgent) ? \"Android\" : \"unknown\"\n    }\n\n    handleEnablePIP = () => {\n        this.setState({\n            pip: true\n        })\n    }\n\n    handleTogglePIP = () => {\n        this.setState({\n            pip: !this.state.pip\n        });\n    }\n\n    handleDisablePIP = () => {\n        this.setState({\n            pip: false\n        })\n    }\n\n    checkLogin = () => {\n        if (!this.state.login) {\n            if (ReactPlayer.canEnablePIP(this.state.url)) {\n                this.setState({\n                    pip: true\n                })\n            } else {\n                if (this.getMobileOperatingSystem() === 'Android'){\n                    //call android bridge to enable pip\n                    if (window[\"JSBridge\"]) {\n                        window[\"JSBridge\"].ticketEnablePIP(true);\n                    }else {\n                        alert('bridge not found');\n                    }\n                } else {\n                    this.handleTogglePIP();\n                }\n            }\n            \n            //call login\n            if (this.getMobileOperatingSystem() === 'iOS' || this.getMobileOperatingSystem() === 'Android') {\n                window.location.href = 'https://m.tiket.com/login';\n            }\n            window.addEventListener('message', (event) => {\n                alert(`Received message: ${event.data}`);\n                // if logged in\n                // based on event data from app call login api to get user details.\n                this.handleDisablePIP();\n            });            \n        } else if (this.getMobileOperatingSystem() === 'unknown'){\n            this.handleTogglePIP();\n        }\n    }\n\n\n    \n  render() {\n      const {url, pip} = this.state;\n    return(\n      <div className=\"wrapper\">\n        <ReactPlayer \n            url={url} \n            pip={pip} \n            playing \n            playsinline={true} \n            onEnablePIP={this.handleEnablePIP} \n            onDisablePIP={this.handleDisablePIP} \n            stopOnUnmount={false} />\n        <button onClick={this.checkLogin}>{\n            pip ? 'Disable PIP' : 'Enable PIP'\n        }</button>\n      </div>\n    )\n  }\n}","import logo from './logo.svg';\nimport './App.css';\nimport ReactPlayerDemo from './components/reactplayer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ReactPlayerDemo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}