{"version":3,"sources":["logo.svg","components/reactplayer.js","App.js","reportWebVitals.js","index.js"],"names":["ReactPlayerDemo","state","pip","url","login","getMobileOperatingSystem","standalone","window","navigator","userAgent","toLowerCase","vendor","safari","test","ios","isAndroidWebView","hasOwnProperty","handleEnablePIP","setState","handleTogglePIP","handleDisablePIP","checkLogin","ReactPlayer","canEnablePIP","tiketTogglePIP","alert","location","href","addEventListener","event","data","this","className","playing","onEnablePIP","onDisablePIP","stopOnUnmount","playsinline","config","file","forceVideo","onClick","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uNAAe,I,4DCGMA,E,4MAEjBC,MAAQ,CACJC,KAAK,EACLC,IAAK,+DACLC,OAAO,G,EAGXC,yBAA2B,WACvB,IAAIC,EAAaC,OAAOC,UAAUF,WAC9BG,EAAYF,OAAOC,UAAUC,UAAUC,eAAiBF,UAAUG,OAAOD,cACzEE,EAAS,SAASC,KAAMJ,GACxBK,EAAM,mBAAmBD,KAAMJ,GAC/BM,EAAmBR,OAAOS,eAAe,WAE7C,OAAIF,GAAQR,GAAeM,EAEhB,WAAWC,KAAKJ,IAAcM,EAC9B,UAEA,UAJA,O,EAQfE,gBAAkB,WACd,EAAKC,SAAS,CACVhB,KAAK,K,EAIbiB,gBAAkB,WACd,EAAKD,SAAS,CACVhB,KAAM,EAAKD,MAAMC,O,EAIzBkB,iBAAmB,WACf,EAAKF,SAAS,CACVhB,KAAK,K,EAIbmB,WAAa,WACJ,EAAKpB,MAAMG,MA2B+B,YAApC,EAAKC,4BACZ,EAAKc,mBA3BDG,IAAYC,aAAa,EAAKtB,MAAME,KACpC,EAAKgB,kBAEmC,YAApC,EAAKd,2BAEDE,OAAM,IACNA,OAAM,IAAQiB,gBAAe,GAE7BC,MAAM,oBAGV,EAAKN,kBAK2B,QAApC,EAAKd,4BAA4E,YAApC,EAAKA,6BAClDE,OAAOmB,SAASC,KAAO,6BAG3BpB,OAAOqB,iBAAiB,gBAAgB,SAACC,GACrCJ,MAAM,qBAAD,OAAsBI,EAAMC,OAGjC,EAAKV,wB,4CASnB,WAAU,IAAD,EACcW,KAAK9B,MAAjBE,EADF,EACEA,IAAKD,EADP,EACOA,IACd,OACE,sBAAK8B,UAAU,UAAf,UACE,cAAC,IAAD,CACI7B,IAAKA,EACLD,MAAOA,EACP+B,SAAO,EACPC,YAAaH,KAAKd,gBAClBkB,aAAcJ,KAAKX,iBACnBgB,eAAe,EACfC,aAAa,EACbC,OAAQ,CACJC,KAAM,CAGJC,YAAY,MAEtB,wBAAQC,QAASV,KAAKV,WAAtB,SACInB,EAAM,cAAgB,sB,GAhGWwC,aCS9BC,MARf,WACE,OACE,qBAAKX,UAAU,MAAf,SACI,cAAC,EAAD,OCKOY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.ad9e0691.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import ReactPlayer from 'react-player';\nimport React, { Component } from 'react';\n\nexport default class ReactPlayerDemo extends Component {\n\n    state = {\n        pip: false,\n        url: \"https://dawchihliou.github.io/react-use-pip/video-sample.mp4\",\n        login: false,\n    } \n\n    getMobileOperatingSystem = () => {\n        let standalone = window.navigator.standalone,\n            userAgent = window.navigator.userAgent.toLowerCase() || navigator.vendor.toLowerCase(),\n            safari = /safari/.test( userAgent ),\n            ios = /iphone|ipod|ipad/.test( userAgent ),\n            isAndroidWebView = window.hasOwnProperty('Android');\n             \n        if (ios && !standalone && !safari) {\n            return 'iOS';\n        } else if (/android/i.test(userAgent) && isAndroidWebView) {\n            return 'Android';\n        } else {\n            return 'unknown';\n        }\n    }\n\n    handleEnablePIP = () => {\n        this.setState({\n            pip: true\n        })\n    }\n\n    handleTogglePIP = () => {\n        this.setState({\n            pip: !this.state.pip\n        });\n    }\n\n    handleDisablePIP = () => {\n        this.setState({\n            pip: false\n        })\n    }\n\n    checkLogin = () => {\n        if (!this.state.login) {\n            if (ReactPlayer.canEnablePIP(this.state.url)) {\n                this.handleTogglePIP();\n            } else {\n                if (this.getMobileOperatingSystem() === 'Android'){\n                    //call android bridge to enable pip\n                    if (window[\"app\"]) {\n                        window[\"app\"].tiketTogglePIP(true);\n                    }else {\n                        alert('bridge not found');\n                    }\n                } else {\n                    this.handleTogglePIP();\n                }\n            }\n            \n            \n            if (this.getMobileOperatingSystem() === 'iOS' || this.getMobileOperatingSystem() === 'Android') {\n                window.location.href = 'https://m.tiket.com/login';\n                // App to intercept this call and check login and get login done and return event which we use to fetch username.\n            }\n            window.addEventListener('TL_SET_TOKEN', (event) => {\n                alert(`Received message: ${event.data}`);\n                // if logged in\n                // based on event data from app call login api to get user details.\n                this.handleDisablePIP();\n            });            \n        } else if (this.getMobileOperatingSystem() === 'unknown'){\n            this.handleTogglePIP();\n        }\n    }\n\n\n    \n  render() {\n      const {url, pip} = this.state;\n    return(\n      <div className=\"wrapper\">\n        <ReactPlayer \n            url={url} \n            pip={!!pip} \n            playing\n            onEnablePIP={this.handleEnablePIP} \n            onDisablePIP={this.handleDisablePIP} \n            stopOnUnmount={false} \n            playsinline={true}\n            config={{\n                file: {\n                  // NOTE: Forcing HLS makes the stream to not work on iOS devices.\n                  // forceHLS: true,\n                  forceVideo: true,}}}\n                  />\n        <button onClick={this.checkLogin}>{\n            pip ? 'Disable PIP' : 'Enable PIP'\n        }</button>\n      </div>\n    )\n  }\n}","import logo from './logo.svg';\nimport './App.css';\nimport ReactPlayerDemo from './components/reactplayer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ReactPlayerDemo />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}